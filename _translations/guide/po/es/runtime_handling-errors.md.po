# Spanish translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-04 11:19+0500\n"
"PO-Revision-Date: 2025-09-04 11:19+0500\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. type: Title #
#: en/runtime/handling-errors.md
#, no-wrap
msgid "Handling errors"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Yii has a [yiisoft/error-handler](https://github.com/yiisoft/error-handler) package that makes error handling a much more pleasant experience than before. In particular, the Yii error handler provides the following:"
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "[PSR-15](https://www.php-fig.org/psr/psr-15/) middleware for catching unhandled errors."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "PSR-15 middleware for mapping certain exceptions to custom responses."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Production and debug modes."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Debug mode displays details, stacktrace, has dark and light themes and handy buttons to search for error without typing."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Takes PHP settings into account."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Handles out of memory errors, fatal errors, warnings, notices, and exceptions."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Can use any [PSR-3](https://www.php-fig.org/psr/psr-3/) compatible logger for error logging."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Detects a response format based on a mime type of the request."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "Supports responding with HTML, plain text, JSON, XML, and headers out of the box."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "You can implement your own error rendering for extra types."
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "This guide describes how to use the error handler in the [Yii framework](https://www.yiiframework.com/), for information about using it separate from Yii, see the [package description](https://github.com/yiisoft/error-handler)."
msgstr ""

#. type: Title ##
#: en/runtime/handling-errors.md
#, no-wrap
msgid "Using error handler"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "The error handler consists of two parts. One part is `Yiisoft\\ErrorHandler\\Middleware\\ErrorCatcher` middleware that, when registered, catches exceptions that may appear during middleware stack execution and passes them to the handler.  Another part is the error handler itself, `Yiisoft\\ErrorHandler\\ErrorHandler`, that's catching exceptions occurring outside the middleware stack and fatal errors. The handler also converts warnings and notices to exceptions and does more handy things."
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Error handler is registered in the application itself. Usually it happens in `ApplicationRunner`. By default, the handler configuration comes from the container. You may configure it in the application configuration, `config/web.php` like the following:"
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"use Psr\\Log\\LoggerInterface;\n"
"use Yiisoft\\ErrorHandler\\ErrorHandler;\n"
"use Yiisoft\\ErrorHandler\\Renderer\\HtmlRenderer;\n"
"use Yiisoft\\ErrorHandler\\ThrowableRendererInterface;\n"
"\n"
"return [\n"
"    // ...\n"
"    ErrorHandler::class => static function (LoggerInterface $logger, ThrowableRendererInterface $renderer) {\n"
"        $errorHandler = new ErrorHandler($logger, $renderer);\n"
"        // Set the size of the reserved memory to 512 KB. Defaults to 256KB.\n"
"        $errorHandler->memoryReserveSize(524_288);\n"
"        return $errorHandler;\n"
"    },\n"
"    \n"
"    ThrowableRendererInterface::class => static fn () => new HtmlRenderer([\n"
"        // Defaults to the package file \"templates/production.php\".\n"
"        'template' => '/full/path/to/production/template/file',\n"
"        // Defaults to package file \"templates/development.php\".\n"
"        'verboseTemplate' => '/full/path/to/development/template/file',\n"
"        // Maximum number of source code lines to be displayed. Defaults to 19.\n"
"        'maxSourceLines' => 20,\n"
"        // Maximum number of trace source code lines to be displayed. Defaults to 13.\n"
"        'maxTraceLines' => 5,\n"
"        // Trace the header line with placeholders (file, line, icon) to be substituted. Defaults to `null`.\n"
"        'traceHeaderLine' => '<a href=\"ide://open?file={file}&line={line}\">{icon}</a>',\n"
"    ]),\n"
"    // ...\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "As aforementioned, the error handler turns all non-fatal PHP errors into catchable exceptions (`Yiisoft\\ErrorHandler\\Exception\\ErrorException`). This means you can use the following code to deal with PHP errors:"
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"try {\n"
"    10 / 0;\n"
"} catch (\\Yiisoft\\ErrorHandler\\Exception\\ErrorException $e) {\n"
"    // Write a log or something else.\n"
"}\n"
"// execution continues...\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "The package has another middleware, `Yiisoft\\ErrorHandler\\Middleware\\ExceptionResponder`.  This middleware maps certain exceptions to custom responses. Configure it in the application configuration as follows:"
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"use Psr\\Http\\Message\\ResponseFactoryInterface;\n"
"use Yiisoft\\ErrorHandler\\Middleware\\ExceptionResponder;\n"
"use Yiisoft\\Injector\\Injector;\n"
"\n"
"return [\n"
"    // ...\n"
"    ErrorHandler::class => static function (ResponseFactoryInterface $responseFactory, Injector $injector) {\n"
"        $exceptionMap = [\n"
"            // Status code with which the factory creates the response.\n"
"            MyNotFoundException::class => 404,\n"
"            // PHP callable that must return a `Psr\\Http\\Message\\ResponseInterface`.\n"
"            MyHttpException::class => static fn (MyHttpException $exception) => new MyResponse($exception),\n"
"            // ...\n"
"        ],\n"
"        \n"
"        return new ExceptionResponder($exceptionMap, $responseFactory, $injector);\n"
"    },\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Note that when configuring application middleware stack, you must place `Yiisoft\\ErrorHandler\\Middleware\\ExceptionResponder` before `Yiisoft\\ErrorHandler\\Middleware\\ErrorCatcher`."
msgstr ""

#. type: Title ##
#: en/runtime/handling-errors.md
#, no-wrap
msgid "Rendering error data"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "One of the renderers could render error data into a certain format.  The following renderers are available out of the box:"
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "`Yiisoft\\ErrorHandler\\Renderer\\HeaderRenderer` - Renders error into HTTP headers. It's used for `HEAD` request."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "`Yiisoft\\ErrorHandler\\Renderer\\HtmlRenderer` - Renders error into HTML."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "`Yiisoft\\ErrorHandler\\Renderer\\JsonRenderer` - Renders error into JSON."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "`Yiisoft\\ErrorHandler\\Renderer\\PlainTextRenderer` - Renders error into plain text."
msgstr ""

#. type: Bullet: '- '
#: en/runtime/handling-errors.md
msgid "`Yiisoft\\ErrorHandler\\Renderer\\XmlRenderer` - Renders error into XML."
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "The renderer produces detailed error data depending on whether debug mode is enabled or disabled."
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "An Example of header rendering with a debugging mode turned off:"
msgstr ""

#. type: Fenced code block
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"...\n"
"X-Error-Message: An internal server error occurred.\n"
"...\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "An Example of header rendering with a debugging mode turned on:"
msgstr ""

#. type: Fenced code block
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"...\n"
"X-Error-Type: Error\n"
"X-Error-Message: Call to undefined function App\\Controller\\myFunc()\n"
"X-Error-Code: 0\n"
"X-Error-File: /var/www/yii/app/src/Controller/SiteController.php\n"
"X-Error-Line: 21\n"
"...\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Example of JSON rendering output with a debugging mode turned off:"
msgstr ""

#. type: Fenced code block (json)
#: en/runtime/handling-errors.md
#, no-wrap
msgid "{\"message\":\"An internal server error occurred.\"}\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "An Example of JSON rendering output with debugging mode turned on:"
msgstr ""

#. type: Fenced code block (json)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"{\n"
"    \"type\": \"Error\",\n"
"    \"message\": \"Call to undefined function App\\\\Controller\\\\myFunc()\",\n"
"    \"code\": 0,\n"
"    \"file\": \"/var/www/yii/app/src/Controller/SiteController.php\",\n"
"    \"line\": 21,\n"
"    \"trace\": [\n"
"        {\n"
"            \"function\": \"index\",\n"
"            \"class\": \"App\\\\Controller\\\\SiteController\",\n"
"            \"type\": \"->\"\n"
"        },\n"
"        {\n"
"            \"file\": \"/var/www/yii/app/vendor/yiisoft/injector/src/Injector.php\",\n"
"            \"line\": 63,\n"
"            \"function\": \"invokeArgs\",\n"
"            \"class\": \"ReflectionFunction\",\n"
"            \"type\": \"->\"\n"
"        },\n"
"        ...\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Example of HTML rendering with debugging mode turned off:"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "![View production](img/view-production.png)"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Example of HTML rendering with debugging mode on and a light theme:"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "![View development with light theme](img/view-development-light.png)"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Example of HTML rendering with debugging mode on and a dark theme:"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "![View development with dark theme](img/view-development-dark.png)"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "The error catcher chooses how to render an exception based on `accept` HTTP header.  If it's `text/html` or any unknown content type, it will use the error or exception HTML template to display errors.  For other mime types, the error handler will choose different renderers that you register within the error catcher.  By default, it supports JSON, XML, and plain text."
msgstr ""

#. type: Title ###
#: en/runtime/handling-errors.md
#, no-wrap
msgid "Implementing your own renderer"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "You may customize the error response format by providing your own instance of `Yiisoft\\ErrorHandler\\ThrowableRendererInterface` when registering error catcher middleware."
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"use Psr\\Http\\Message\\ServerRequestInterface;\n"
"use Yiisoft\\ErrorHandler\\ErrorData;\n"
"use Yiisoft\\ErrorHandler\\ThrowableRendererInterface;\n"
"\n"
"final readonly class MyRenderer implements ThrowableRendererInterface\n"
"{\n"
"    public function render(Throwable $t, ServerRequestInterface $request = null): ErrorData\n"
"    {\n"
"        return new ErrorData($t->getMessage());\n"
"    }\n"
"\n"
"    public function renderVerbose(Throwable $t, ServerRequestInterface $request = null): ErrorData\n"
"    {\n"
"        return new ErrorData(\n"
"            $t->getMessage(),\n"
"            ['X-Custom-Header' => 'value-header'], // Headers to be added to the response.\n"
"        );\n"
"    }\n"
"};\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "You may configure it in the application configuration `config/web.php`:"
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"use Psr\\Container\\ContainerInterface;\n"
"use Psr\\Http\\Message\\ResponseFactoryInterface;\n"
"use Yiisoft\\ErrorHandler\\ErrorHandler;\n"
"use Yiisoft\\ErrorHandler\\Middleware\\ErrorCatcher;\n"
"\n"
"return [\n"
"    // ...\n"
"    ErrorCatcher::class => static function (ContainerInterface $container): ErrorCatcher {\n"
"        $errorCatcher = new ErrorCatcher(\n"
"            $container->get(ResponseFactoryInterface::class),\n"
"            $container->get(ErrorHandler::class),\n"
"            $container,\n"
"        );\n"
"        // Returns a new instance without renderers by the specified content types.\n"
"        $errorCatcher = $errorCatcher->withoutRenderers('application/xml', 'text/xml');\n"
"        // Returns a new instance with the specified content type and renderer class.\n"
"        return $errorCatcher->withRenderer('my/format', new MyRenderer());\n"
"    },\n"
"    // ...\n"
"];\n"
msgstr ""

#. type: Title ##
#: en/runtime/handling-errors.md
#, no-wrap
msgid "Friendly exceptions"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "Yii error renderer supports [friendly exceptions](https://github.com/yiisoft/friendly-exception) that make error handling an even more pleasant experience for your team. The idea is to offer a readable name and possible solutions to the problem:"
msgstr ""

#. type: Fenced code block (php)
#: en/runtime/handling-errors.md
#, no-wrap
msgid ""
"use Yiisoft\\FriendlyException\\FriendlyExceptionInterface;\n"
"\n"
"final readonly class RequestTimeoutException extends \\RuntimeException implements FriendlyExceptionInterface\n"
"{\n"
"    public function getName(): string\n"
"    {\n"
"        return 'Request timed out';\n"
"    }\n"
"    \n"
"    public function getSolution(): ?string\n"
"    {\n"
"        return <<<'SOLUTION'\n"
"Likely it is a result of resource request is not responding in a timely fashion. Try increasing timeout.\n"
"SOLUTION;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: en/runtime/handling-errors.md
msgid "When the application throws such an exception, the error renderer would display the name and the solution if the debug mode is on."
msgstr ""
