# Indonesian translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-04 11:19+0500\n"
"PO-Revision-Date: 2025-09-04 11:19+0500\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: id\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: en/start/forms.md en/start/hello.md
#, no-wrap
msgid "Summary <span id=\"summary\"></span>"
msgstr ""

#. type: Title #
#: en/start/hello.md
#, no-wrap
msgid "Saying hello"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "This section describes how to create a new \"Hello\" page in your application.  It's a simple page that will echo back whatever you pass to it or, if nothing passed, will just say \"Hello!\"."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "To achieve this goal, you will define a route and create [a handler](../structure/handler.md) that does the job and forms the response.  Then you will improve it to use [view](../structure/views.md) for building the response."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Through this tutorial, you will learn three things:"
msgstr ""

#. type: Bullet: '1. '
#: en/start/hello.md
msgid "How to create a handler to respond to a request."
msgstr ""

#. type: Bullet: '2. '
#: en/start/hello.md
msgid "How to map URL to the handler."
msgstr ""

#. type: Bullet: '3. '
#: en/start/hello.md
msgid "How to create a [view](../structure/view.md) to compose the response's content."
msgstr ""

#. type: Title ##
#: en/start/hello.md
#, no-wrap
msgid "Creating a handler <span id=\"creating-handler\"></span>"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "For the \"Hello\" task, you will create a handler class that reads a `message` parameter from the request and displays that message back to the user. If the request doesn't provide a `message` parameter, the action will display the default \"Hello\" message."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Create `src/Controller/Echo/Action.php`:"
msgstr ""

#. type: Fenced code block (php)
#: en/start/hello.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"namespace App\\Controller\\Echo;\n"
"\n"
"use Psr\\Http\\Message\\ResponseFactoryInterface;\n"
"use Psr\\Http\\Message\\ResponseInterface;\n"
"use Yiisoft\\Html\\Html;\n"
"use Yiisoft\\Router\\HydratorAttribute\\RouteArgument;\n"
"\n"
"final readonly class Action\n"
"{\n"
"    public function __construct(\n"
"        private ResponseFactoryInterface $responseFactory,\n"
"    ) {}\n"
"\n"
"    #[RouteArgument('message')]\n"
"    public function __invoke(string $message = 'Hello!'): ResponseInterface\n"
"    {\n"
"        $response = $this->responseFactory->createResponse();\n"
"        $response->getBody()->write('The message is: ' . Html::encode($message));\n"
"        return $response;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "In your example, the `__invoke` method receives the `$message` parameter that with the help of `RouteArgument` attribute gets the message from URL. The value defaults to `\"Hello!\"`. If the request is made to `/say/Goodbye`, the action assigns the value \"Goodbye\" to the `$message` variable."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "The application passes the response through the [middleware stack](../structure/middleware.md) to the emitter that outputs the response to the end user."
msgstr ""

#. type: Title ##
#: en/start/hello.md
#, no-wrap
msgid "Configuring router"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Now, to map your handler to URL, you need to add a route in `config/common/routes.php`:"
msgstr ""

#. type: Fenced code block (php)
#: en/start/hello.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"use Yiisoft\\Router\\Group;\n"
"use Yiisoft\\Router\\Route;\n"
"\n"
"return [\n"
"    Group::create()\n"
"        ->routes(\n"
"            Route::get('/')\n"
"                ->action(\\App\\Controller\\HomePage\\Action::class)\n"
"                ->name('home'),\n"
"            Route::get('/say[/{message}]')\n"
"                ->action(\\App\\Controller\\Echo\\Action::class)\n"
"                ->name('echo/say'),\n"
"        ),\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "In the above, you map the `/say[/{message}]` pattern to `\\App\\Controller\\Echo\\Action`.  For a request, the router creates an instance and calls the `__invoke()` method.  The `{message}` part of the pattern writes anything specified in this place to the `message` request attribute.  `[]` marks this part of the pattern as optional."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "You also give a `echo/say` name to this route to be able to generate URLs pointing to it."
msgstr ""

#. type: Title ##
#: en/start/hello.md
#, no-wrap
msgid "Trying it out <span id=\"trying-it-out\"></span>"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "After creating the action and the view open `http://localhost/say/Hello+World` in your browser."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "This URL displays a page with \"The message is: Hello World\"."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "If you omit the `message` parameter in the URL, the page displays \"The message is: Hello!\"."
msgstr ""

#. type: Title ##
#: en/start/hello.md
#, no-wrap
msgid "Creating a View Template <span id=\"creating-view-template\"></span>"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Usually, the task is more complicated than printing out \"hello world\" and involves rendering some complex HTML. For this task, it's handy to use view templates. They're scripts you write to generate a response's body."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "For the \"Hello\" task, create a `src/Controller/Echo/template.php` template that prints the `message` parameter received from the action method:"
msgstr ""

#. type: Fenced code block (php)
#: en/start/hello.md
#, no-wrap
msgid ""
"<?php\n"
"use Yiisoft\\Html\\Html;\n"
"/* @var string $message */\n"
"?>\n"
"\n"
"<p>The message is: <?= Html::encode($message) ?></p>\n"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "In the above code, the `message` parameter uses HTML encoding before you print it. You need that because the parameter comes from an end user and is vulnerable to [cross-site scripting (XSS) attacks](https://en.wikipedia.org/wiki/Cross-site_scripting) by embedding malicious JavaScript in the parameter."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Naturally, you may put more content in the `say` view. The content can consist of HTML tags, plain text, and even PHP statements. In fact, the view service executes the `say` view as a PHP script."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "To use the view, you need to change `src/Controller/Echo/Action.php`:"
msgstr ""

#. type: Fenced code block (php)
#: en/start/hello.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"namespace App\\Controller\\Echo;\n"
"\n"
"use Psr\\Http\\Message\\ResponseInterface;\n"
"use Yiisoft\\Router\\HydratorAttribute\\RouteArgument;\n"
"use Yiisoft\\Yii\\View\\Renderer\\ViewRenderer;\n"
"\n"
"final readonly class Action\n"
"{\n"
"    public function __construct(\n"
"        private ViewRenderer $viewRenderer,\n"
"    ) {}\n"
"\n"
"    #[RouteArgument('message')]\n"
"    public function __invoke(string $message = 'Hello!'): ResponseInterface\n"
"    {\n"
"        return $this->viewRenderer->render(__DIR__ . '/template', [\n"
"            'message' => $message,\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Now open your browser and check it again. You should see the similar text but with a layout applied."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "Also, you've separated the part about how it works and part of how it's presented. In the larger applications, it helps a lot to deal with complexity."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "In this section, you've touched the handler and template parts of the typical web application.  You created a handler as part of a class to handle a specific request. You also created a view to compose the response's content. In this simple example, no data source was involved as the only data used was the `message` parameter."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "You've also learned about routing in Yii, which acts as the bridge between user requests and handlers."
msgstr ""

#. type: Plain text
#: en/start/hello.md
msgid "In the next section, you will learn how to fetch data and add a new page containing an HTML form."
msgstr ""

#. type: Plain text
#: en/start/hello.md
#, no-wrap
msgid ""
"> [!NOTE]\n"
"> [← Running applications](workflow.md) |\n"
"> [Working with forms →](forms.md)\n"
msgstr ""
