# Russian translations for PACKAGE package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-04 11:19+0500\n"
"PO-Revision-Date: 2025-09-04 11:19+0500\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#. type: Title ##
#: en/concept/configuration.md en/tutorial/using-yii-with-roadrunner.md
#: en/views/view-injections.md
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "конфигурация может быть:"

#. type: Plain text
#: en/concept/configuration.md
msgid "There are many ways to configure your application. We will focus on concepts used in the [default project template](https://github.com/yiisoft/app)."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Yii3 configs are part of the application. You can change many aspects of how the application works by editing configuration under `config/`."
msgstr ""

#. type: Title ##
#: en/concept/configuration.md
#, no-wrap
msgid "Config plugin"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "In the application template [yiisoft/config](https://github.com/yiisoft/config) is used. Since writing all application configurations from scratch is a tedious process, many packages offer default configs, and the plugin helps with copying these into the application."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "To offer default configs, `composer.json` of the package has to have `config-plugin` section.  When installing or updating packages with Composer, the plugin reads `config-plugin` sections for each dependency, copies files themselves to application `config/packages/` if they don't yet exist and writes a merge plan to `config/packages/merge_plan.php`. The merge plan defines how to merge the configs into a single big array ready to be passed to [DI container](di-container.md)."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Take a look at what's in the \"yiisoft/app\" `composer.json` by default:"
msgstr ""

#. type: Fenced code block (json)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"\"config-plugin-options\": {\n"
"  \"output-directory\": \"config/packages\"\n"
"},\n"
"\"config-plugin\": {\n"
"    \"common\": \"config/common/*.php\",\n"
"    \"params\": [\n"
"        \"config/params.php\",\n"
"        \"?config/params-local.php\"\n"
"    ],\n"
"    \"web\": [\n"
"        \"$common\",\n"
"        \"config/web/*.php\"\n"
"    ],\n"
"    \"console\": [\n"
"        \"$common\",\n"
"        \"config/console/*.php\"\n"
"    ],\n"
"    \"events\": \"config/events.php\",\n"
"    \"events-web\": [\n"
"        \"$events\",\n"
"        \"config/events-web.php\"\n"
"    ],\n"
"    \"events-console\": [\n"
"        \"$events\",\n"
"        \"config/events-console.php\"\n"
"    ],\n"
"    \"providers\": \"config/providers.php\",\n"
"    \"providers-web\": [\n"
"        \"$providers\",\n"
"        \"config/providers-web.php\"\n"
"    ],\n"
"    \"providers-console\": [\n"
"        \"$providers\",\n"
"        \"config/providers-console.php\"\n"
"    ],\n"
"    \"routes\": \"config/routes.php\"\n"
"},\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "There are many named configs defined. For each name, there is a configuration."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "A string means that the plugin takes config as is and merges it with same-named configs from packages you require.  That happens if these packages have `config-plugin` in their `composer.json`."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "The array means that the plugin will merge many files in the order they're specified."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "`?` at the beginning of the file path indicated that the file may be absent. In this case, it's skipped."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "`$` at the beginning of the name means a reference to another named config."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "`params` is a bit special because it's reserved for application parameters. These are automatically available as `$params` in all other configuration files."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "You can learn more about config plugin features [from its documentation](https://github.com/yiisoft/config/blob/master/README.md)."
msgstr ""

#. type: Title ##
#: en/concept/configuration.md
#, no-wrap
msgid "Config files"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Now, as you know how the plugin assembles configs, look at `config` directory:"
msgstr ""

#. type: Fenced code block
#: en/concept/configuration.md
#, no-wrap
msgid ""
"common/\n"
"    application-parameters.php\n"
"    i18n.php\n"
"    router.php\n"
"console/\n"
"packages/\n"
"    yiisoft/\n"
"    dist.lock\n"
"    merge_plan.php\n"
"web/\n"
"    application.php\n"
"    psr17.php\n"
"events.php\n"
"events-console.php\n"
"events-web.php\n"
"params.php\n"
"providers.php\n"
"providers-console.php\n"
"providers-web.php\n"
"routes.php\n"
msgstr ""

#. type: Title ###
#: en/concept/configuration.md
#, fuzzy, no-wrap
#| msgid "Secure server configuration"
msgid "Container configuration"
msgstr "Безопасная конфигурация сервера"

#. type: Plain text
#: en/concept/configuration.md
msgid "The application consists of a set of services registered in a [dependency container](di-container.md). The config files that responsible for direct dependency container configuration are under `common/`, `console/` and `web/` directories.  We use `web/` for config specific to web application and `console/` for config specific to console commands. Both web and console are sharing configuration under `common/`."
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"use App\\ApplicationParameters;\n"
"\n"
"/** @var array $params */\n"
"\n"
"return [\n"
"    ApplicationParameters::class => [\n"
"        'class' => ApplicationParameters::class,\n"
"        'charset()' => [$params['app']['charset']],\n"
"        'name()' => [$params['app']['name']],\n"
"    ],\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Config plugin passes special `$params` variable to all config files.  The code passes its values to the service."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "The guide on [\"Dependency injection and container\"](di-container.md) describes the configuration format and the idea of dependency injection in detail."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "For convenience, there is a naming convention for custom string keys:"
msgstr ""

#. type: Bullet: '1. '
#: en/concept/configuration.md
msgid "Prefix package name such as `yiisoft/cache-file/custom-definition`."
msgstr ""

#. type: Bullet: '2. '
#: en/concept/configuration.md
msgid "In case configuration are for the application itself, skip package prefix, such as `custom-definition`."
msgstr ""

#. type: Title ###
#: en/concept/configuration.md
#, no-wrap
msgid "Service providers"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "As an alternative to registering dependencies directly, you can use service providers. Basically, these are classes that given parameters are configuring and registering services within the container. Similar to three dependency configuration files described, there are three configs for specifying service providers: `providers-console.php` for console commands, `providers-web.php` for web application and `providers.php` for both:"
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"/* @var array $params */\n"
"\n"
"// ...\n"
"use App\\Provider\\CacheProvider;\n"
"use App\\Provider\\MiddlewareProvider;\n"
"// ...\n"
"\n"
"return [\n"
"    // ...\n"
"    'yiisoft/yii-web/middleware' => MiddlewareProvider::class,\n"
"    'yiisoft/cache/cache' =>  [\n"
"        'class' => CacheProvider::class,\n"
"        '__construct()' => [\n"
"            $params['yiisoft/cache-file']['file-cache']['path'],\n"
"        ],\n"
"    ],\n"
"    // ...\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "In this config keys are provider names. By convention these are `vendor/package-name/provider-name`. Values are provider class names. These classes could be either created in the project itself or provided by a package."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "If you need to configure some options for a service, similar to direct container configuration, take values from `$params` and pass them to providers."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Provider should implement a single method, `public function register(Container $container): void`. In this method you need to add a service to container using `set()` method. Below is a provider for a cache service:"
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"use Psr\\Container\\ContainerInterface;\n"
"use Psr\\SimpleCache\\CacheInterface;\n"
"use Yiisoft\\Aliases\\Aliases;\n"
"use Yiisoft\\Cache\\Cache;\n"
"use Yiisoft\\Cache\\CacheInterface as YiiCacheInterface;\n"
"use Yiisoft\\Cache\\File\\FileCache;\n"
"use Yiisoft\\Di\\Container;\n"
"use Yiisoft\\Di\\Support\\ServiceProvider;\n"
"\n"
"final readonly class CacheProvider extends ServiceProvider\n"
"{\n"
"    public function __construct(\n"
"        private string $cachePath = '@runtime/cache'\n"
"    )\n"
"    {\n"
"        $this->cachePath = $cachePath;\n"
"    }\n"
"\n"
"    public function register(Container $container): void\n"
"    {\n"
"        $container->set(CacheInterface::class, function (ContainerInterface $container) {\n"
"            $aliases = $container->get(Aliases::class);\n"
"\n"
"            return new FileCache($aliases->get($this->cachePath));\n"
"        });\n"
"\n"
"        $container->set(YiiCacheInterface::class, Cache::class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: en/concept/configuration.md
#, no-wrap
msgid "Routes"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "You can configure how web application responds to certain URLs in `config/routes.php`:"
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"use App\\Controller\\SiteController;\n"
"use Yiisoft\\Router\\Route;\n"
"\n"
"return [\n"
"    Route::get('/')->action([SiteController::class, 'index'])->name('site/index')\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Read more about it in [\"Routes\"](../runtime/routing.md)."
msgstr ""

#. type: Title #
#: en/concept/configuration.md en/concept/events.md
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Many services emit certain events that you can attach to.  You could do that via three config files: `events-web.php` for web application events, `events-console.php` for console events and `events.php` for both.  The configuration is an array where keys are event names and values are an array of handlers:"
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"return [\n"
"    EventName::class => [\n"
"        // Just a regular closure, it will be called from the Dispatcher \"as is\".\n"
"        static fn (EventName $event) => someStuff($event),\n"
"        \n"
"        // A regular closure with an extra dependency. All the parameters after the first one (the event itself)\n"
"        // will be resolved from your DI container within `yiisoft/injector`.\n"
"        static fn (EventName $event, DependencyClass $dependency) => someStuff($event),\n"
"        \n"
"        // An example with a regular callable. If the `staticMethodName` method has some dependencies,\n"
"        // they will be resolved the same way as in the earlier example.\n"
"        [SomeClass::class, 'staticMethodName'],\n"
"        \n"
"        // Non-static methods are allowed too. In this case, `SomeClass` will be instantiated by your DI container.\n"
"        [SomeClass::class, 'methodName'],\n"
"        \n"
"        // An object of a class with the `__invoke` method implemented\n"
"        new InvokableClass(),\n"
"        \n"
"        // In this case, the `InvokableClass` with the `__invoke` method will be instantiated by your DI container\n"
"        InvokableClass::class,\n"
"        \n"
"        // Any definition of an invokable class may be here while your `$container->has('the definition)` \n"
"        'di-alias'\n"
"    ],\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Read more about it in [\"Events\"](events.md)."
msgstr ""

#. type: Title ###
#: en/concept/configuration.md
#, no-wrap
msgid "Parameters"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Parameters, `config/params.php` store configuration values that are used in other config files to configuring services and service providers."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
#, no-wrap
msgid ""
"> [!TIP]\n"
"> Don't use parameters, constants or environment variables directly in your application, configure\n"
"> services instead.\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Default application `params.php` looks like the following:"
msgstr ""

#. type: Fenced code block (php)
#: en/concept/configuration.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"use App\\Command\\Hello;\n"
"use App\\ViewInjection\\ContentViewInjection;\n"
"use App\\ViewInjection\\LayoutViewInjection;\n"
"use Yiisoft\\Definitions\\Reference;\n"
"use Yiisoft\\Yii\\View\\CsrfViewInjection;\n"
"\n"
"return [\n"
"    'app' => [\n"
"        'charset' => 'UTF-8',\n"
"        'locale' => 'en',\n"
"        'name' => 'My Project',\n"
"    ],\n"
"\n"
"    'yiisoft/aliases' => [\n"
"        'aliases' => [\n"
"            '@root' => dirname(__DIR__),\n"
"            '@assets' => '@root/public/assets',\n"
"            '@assetsUrl' => '/assets',\n"
"            '@baseUrl' => '/',\n"
"            '@message' => '@root/resources/message',\n"
"            '@npm' => '@root/node_modules',\n"
"            '@public' => '@root/public',\n"
"            '@resources' => '@root/resources',\n"
"            '@runtime' => '@root/runtime',\n"
"            '@vendor' => '@root/vendor',\n"
"            '@layout' => '@resources/views/layout',\n"
"            '@views' => '@resources/views',\n"
"        ],\n"
"    ],\n"
"\n"
"    'yiisoft/yii-view' => [\n"
"        'injections' => [\n"
"            Reference::to(ContentViewInjection::class),\n"
"            Reference::to(CsrfViewInjection::class),\n"
"            Reference::to(LayoutViewInjection::class),\n"
"        ],\n"
"    ],\n"
"\n"
"    'yiisoft/yii-console' => [\n"
"        'commands' => [\n"
"            'hello' => Hello::class,\n"
"        ],\n"
"    ],\n"
"];\n"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "For convenience, there is a naming convention about parameters:"
msgstr ""

#. type: Bullet: '1. '
#: en/concept/configuration.md
msgid "Group parameters package name such as `yiisoft/cache-file`."
msgstr ""

#. type: Bullet: '2. '
#: en/concept/configuration.md
msgid "In case parameters are for the application itself, as in `app`, skip package prefix."
msgstr ""

#. type: Bullet: '3. '
#: en/concept/configuration.md
msgid "In case there are many services in the package, such as `file-target` and `file-rotator` in `yiisoft/log-target-file` package, group parameters by service name."
msgstr ""

#. type: Bullet: '4. '
#: en/concept/configuration.md
msgid "Use `enabled` as parameter name to be able to disable or enable a service, such as `yiisoft/yii-debug`."
msgstr ""

#. type: Title ###
#: en/concept/configuration.md
#, no-wrap
msgid "Package configs"
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "Config plugin described copy default package configurations to `packages/` directory. Once copied you own the configs, so you can adjust these as you like. `yiisoft/` in the default template stands for package vendor. Since only `yiisoft` packages are in template, there's a single directory. `merge_plan.php` is used in runtime to get the order on how configs are merged.  Note that for config keys there should be a single source of truth.  One config can't override values of another config."
msgstr ""

#. type: Plain text
#: en/concept/configuration.md
msgid "`dist.lock` is used by the plugin to keep track of changes and display diff between current config and example one."
msgstr ""
