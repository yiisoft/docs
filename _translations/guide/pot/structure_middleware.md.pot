# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-11 10:15+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Middleware"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Yii works with HTTP using the abstraction layer built around [PSR-7 HTTP "
"message interfaces](https://www.php-fig.org/psr/psr-7/)  and [PSR-15 request "
"handler/middleware interfaces](https://www.php-fig.org/psr/psr-15/)."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"The application is composed of one or several middleware. Middleware runs "
"between request and response.  When the URL is requested, the request object "
"is passed to the middleware dispatcher that starts executing middleware one "
"after another.  Each middleware, given the request, can:"
msgstr ""

#. type: Bullet: '- '
#: ../../guide/en/structure/middleware.md
msgid ""
"Pass the request to the next middleware performing some work before / after "
"it."
msgstr ""

#. type: Bullet: '- '
#: ../../guide/en/structure/middleware.md
msgid "Form the response and return it."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Depending on middleware used, application behavior may vary significantly."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid "![Middleware](img/middleware.svg)"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"In the above each next middleware wraps the previous middleware. "
"Alternatively, it could be presented as follows:"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid "![Middleware](img/middleware_alternative.svg)"
msgstr ""

#. type: Title ##
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Using middleware"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Any [PSR-15](https://www.php-fig.org/psr/psr-15/) compatible middleware "
"could be used with Yii, and there are many.  Say, you need to add basic "
"authentication to one of the application URLs.  URL-dependent middleware is "
"configured using router, so you need to change the router factory."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Authentication middleware is implemented by `middlewares/http-"
"authentication` package so execute `composer require middlewares/http-"
"authentication` in the application root directory."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Now register the middleware in DI container configuration `config/web.php`:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"<?php\n"
"\\Middlewares\\BasicAuthentication::class => [\n"
"    'class' => \\Middlewares\\BasicAuthentication::class,\n"
"    '__construct()' => [\n"
"        'users' => [\n"
"            'foo' => 'bar',\n"
"        ],\n"
"    ],\n"
"    'realm()' => ['Access to the staging site via basic auth'],\n"
"    'attribute()' => ['username'],\n"
"],\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid "In the `config/routes.php`, add new route:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"<?php\n"
"\n"
"declare(strict_types=1);\n"
"\n"
"use Yiisoft\\Router\\Route;\n"
"use App\\Controller\\SiteController;\n"
"use Middlewares\\BasicAuthentication;\n"
"\n"
"\n"
"return [\n"
"    //...\n"
"    Route::get('/basic-auth')->([SiteController::class, 'auth'])\n"
"        ->name('site/auth')\n"
"        ->addMiddleware(BasicAuthentication::class)\n"
"];\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"When configuring routing, you're binding `/basic-auth` URL to a chain of "
"middleware consisting of basic authentication, and the action itself. A "
"chain is a special middleware that executes all the middleware it's "
"configured with."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid "The action itself could be the following:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"public function auth(ServerRequestInterface $request): ResponseInterface\n"
"{\n"
"    $response = $this->responseFactory->createResponse();\n"
"    $response->getBody()->write('Hi ' . $request->getAttribute('username'));\n"
"    return $response;\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"Basic authentication middleware wrote to request `username` attribute, so "
"you can access the data if needed."
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"To apply middleware to application overall regardless of URL, adjust `config/"
"application.php`:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"return [\n"
"    Yiisoft\\Yii\\Http\\Application::class => [\n"
"        '__construct()' => [\n"
"            'dispatcher' => DynamicReference::to(static function (Injector $injector) {\n"
"                return ($injector->make(MiddlewareDispatcher::class))\n"
"                    ->withMiddlewares(\n"
"                        [\n"
"                            ErrorCatcher::class,\n"
"                            BasicAuthentication::class,\n"
"                            SessionMiddleware::class,\n"
"                            CsrfMiddleware::class,\n"
"                            Router::class,\n"
"                        ]\n"
"                    );\n"
"            }),\n"
"            'fallbackHandler' => Reference::to(NotFoundHandler::class),\n"
"        ],\n"
"    ],\n"
"];\n"
msgstr ""

#. type: Title ##
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Creating your own middleware"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"To create middleware, you need to implement a single `process` method of "
"`Psr\\Http\\Server\\MiddlewareInterface`:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "public function process(ServerRequestInterface $request, RequestHandlerInterface $next): ResponseInterface;\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"There are multiple ways to handle a request, and choosing one depends on "
"what the middleware should achieve."
msgstr ""

#. type: Title ###
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Forming a response directly"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"To respond directly, one needs a response factory passed via constructor:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"<?php\n"
"declare(strict_types=1);\n"
"\n"
"use Psr\\Http\\Message\\ResponseFactoryInterface;\n"
"use Psr\\Http\\Message\\ResponseInterface;\n"
"use Psr\\Http\\Message\\ServerRequestInterface;\n"
"use Psr\\Http\\Server\\MiddlewareInterface;\n"
"use Psr\\Http\\Server\\RequestHandlerInterface;\n"
"\n"
"final readonly class RespondingMiddleware implements MiddlewareInterface\n"
"{\n"
"    public function __construct(\n"
"        private ResponseFactoryInterface $responseFactory\n"
"    )\n"
"    {\n"
"    }\n"
"\n"
"    public function process(ServerRequestInterface $request, RequestHandlerInterface $next): ResponseInterface\n"
"    {\n"
"        $response = $this->responseFactory->createResponse();\n"
"        $response->getBody()->write('Hello!');\n"
"        return $response;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ###
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Delegating handling to the next middleware"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"If middleware either isn't intended to form a response or change the request or can't do anything this time,\n"
"handling could be left to the next middleware in the stack:  \n"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "return $next->handle($request);\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"In case you need to pass data to the next middleware, you can use request "
"attributes:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"$request = $request->withAttribute('answer', 42);\n"
"return $next->handle();\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid "To get it in the next middleware:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "$answer = $request->getAttribute('answer');\n"
msgstr ""

#. type: Title ###
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid "Capturing response to manipulate it"
msgstr ""

#. type: Plain text
#: ../../guide/en/structure/middleware.md
msgid ""
"You may want to capture the response to manipulate it. It could be useful "
"for adding CORS headers, gzipping content, etc."
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/structure/middleware.md
#, no-wrap
msgid ""
"$response = $next->handle($request);\n"
"// extra handing\n"
"return $response;\n"
msgstr ""
