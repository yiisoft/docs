# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-11 10:15+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid "Using Yii with event loop"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid ""
"A normal PHP web request execution cycle consists of setting up an environment, getting a request, processing it to form a response\n"
"and sending the result. After the response is sent, execution is terminated and its context is lost. So, for the further \n"
" request, the whole sequence is repeated. Such an approach has a big advantage in ease of development since a developer doesn't\n"
"have to take much care about memory leaks or properly clean up context. On the other side, initializing everything for\n"
"every request takes time and overall consumes up to 50% of processing resources.\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"There is an alternative way of running an application. Event loop. The idea "
"is to initialize everything possible at once and then process a number of "
"requests using it. Such an approach is usually called event loop."
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"There are multiple tools that could be used to achieve it. Notably, "
"[FrankenPHP](https://frankenphp.dev/), [RoadRunner](https://roadrunner.dev/) "
"and [Swoole](https://www.swoole.co.uk/)."
msgstr ""

#. type: Title ##
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid "Event loop implications"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid "Event loop worker basically looks like the following:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid ""
"initializeContext();\n"
"while ($request = getRequest()) {\n"
"   $response = process($request);\n"
"   emit($response);\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"Usually, there are multiple workers processing requests at the same time as "
"with traditional php-fpm."
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid "That means that there's more to consider when developing applications."
msgstr ""

#. type: Title ###
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid "Processing is blocking"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"Worker process requests one by one that's current processing is blocking "
"processing next request. That means that long-running processes, same as in "
"general PHP applications, should be put into a background via using a queue."
msgstr ""

#. type: Title ###
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid "Services and state"
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"Since the context in the event loop is shared between all request-responses "
"processed by a single worker, all changes in the state of a service made by "
"the previous request may affect the current request. Moreover, it can be a "
"security problem if data from one user is available to another user."
msgstr ""

#. type: Plain text
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid ""
"There are two ways of dealing with it. First, you can avoid having state by "
"making services stateless. PHP's `readonly` keyword may be handy for it. "
"Second, you can reset the services' state at the end of the request "
"processing.  In this case, a state resetter will help you:"
msgstr ""

#. type: Fenced code block (php)
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid ""
"initializeContext();\n"
"$resetter = $container->get(\\Yiisoft\\Di\\StateResetter::class);\n"
"while ($request = getRequest()) {\n"
"   $response = process($request);\n"
"   emit($response);\n"
"   $resetter->reset(); // We should reset the state of such services on every request.\n"
"}\n"
msgstr ""

#. type: Title ##
#: ../../guide/en/tutorial/using-with-event-loop.md
#, no-wrap
msgid "Integrations"
msgstr ""

#. type: Bullet: '- '
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid "[RoadRunner](using-yii-with-roadrunner.md)"
msgstr ""

#. type: Bullet: '- '
#: ../../guide/en/tutorial/using-with-event-loop.md
msgid "[Swoole](using-yii-with-swoole.md)"
msgstr ""
