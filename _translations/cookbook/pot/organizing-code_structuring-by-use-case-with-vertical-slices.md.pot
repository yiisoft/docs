# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-09-05 14:50+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
#, no-wrap
msgid "Structuring code by use-case with vertical slices"
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"When building an application, it's important to organize the code in a way "
"that makes it easy to understand, support, and scale. One popular approach "
"is to structure the code by use-case with vertical slices."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"Vertical slices are self-contained pieces of functionality that cover the "
"entire stack, from the user interface to the data access layer.  Developer "
"organizes each slice around a specific use case, such as creating a new user "
"or updating a product."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"When structuring code classically by type (such as models, views, "
"controllers, helpers, etc.), it can be easy to lose sight of the bigger "
"picture and how different pieces of code interact to support specific "
"features or use cases.  This can lead to code duplication, tight coupling, "
"and poor maintainability as the application grows."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"On the other hand, structuring code by use-case makes developers focus on a "
"specific feature or workflow and understand how different pieces of code "
"work together to support that feature. This approach also helps to keep "
"related code together in a single directory, making it easier to navigate "
"and support. Vertical slicing also encourages the use of domain-driven "
"design concepts, such as entities, repositories, and services, which can "
"help to promote good separation of concerns and modularity."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"Additionally, structuring code by use-case can make it easier to test and "
"debug the application since use-case namespace encapsulates each feature or "
"workflow in its own directory with clear boundaries and well-defined "
"interfaces."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"Here's an example directory structure for a PHP application organized using "
"vertical slices:"
msgstr ""

#. type: Fenced code block
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
#, no-wrap
msgid ""
"src/\n"
"└── Blog/\n"
"    ├── Model/\n"
"    │   ├── Comment.php\n"
"    │   ├── CommentRepository.php\n"
"    │   ├── Post.php\n"
"    │   └── PostRepository.php\n"
"    ├── Service/ \n"
"    │   └── MarkdownProcessor.php\n"
"    ├── UseCase/\n"
"    │   ├── CreateComment/\n"
"    │   │   ├── CreateCommentAction.php\n"
"    │   │   ├── CreateCommentRequest.php\n"
"    │   ├── CreatePost/\n"
"    │   │   ├── CreatePostAction.php\n"
"    │   │   ├── CreatePostRequest.php\n"
"    │   ├── DeleteComment/\n"
"    │   │   ├── DeleteCommentAction.php\n"
"    │   │   ├── DeleteCommentRequest.php\n"
"    │   ├── DeletePost/\n"
"    │   │   ├── DeletePostAction.php\n"
"    │   │   ├── DeletePostRequest.php\n"
"    │   ├── ListComments/\n"
"    │   │   ├── ListCommentsAction.php\n"
"    │   ├── ListPosts/\n"
"    │   │   ├── ListPostsAction.php\n"
"    │   ├── UpdatePost/\n"
"    │   │   ├── UpdatePostAction.php\n"
"    │   │   ├── UpdatePostRequest.php\n"
"    │   ├── ViewPost/\n"
"    │   │   ├── ViewPostAction.php\n"
"    │   ├── Rss/\n"
"    │   │   ├── RssAction.php\n"
"    |   |   ├── RssBuilder.php\n"
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"Each vertical slice has its own directory, which has code associated with "
"the use case."
msgstr ""

#. type: Plain text
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"The use-case subdirectories and their respective classes are organized by "
"type within each directory, omitting a directory if there's a single class "
"of the type. If code is shared between multiple use-cases, it's moved one "
"level up such as `Model` or `Service`."
msgstr ""

#. type: Title ##
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
#, no-wrap
msgid "References"
msgstr ""

#. type: Bullet: '- '
#: en/organizing-code/structuring-by-use-case-with-vertical-slices.md
msgid ""
"[Application structure overview](https://github.com/yiisoft/docs/blob/master/"
"guide/en/structure/overview.md)"
msgstr ""
